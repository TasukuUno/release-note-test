{
  /*
  <!-- generated by jscsrc-to-md.js -->

  # JavaScript Coding Style Guide

  コーディングスタイルのチェックにはjscsを利用する

  */

  /*
  ## 基本
  - esnextで記述する
  - 1行の文字数に制限はない
  - インデントのサイズは2
  - タブインデントは許可しない
  - 行末のスペースは許可しない
  - 行末にはセミコロンをつけなければならない
  - ファイル末尾には改行を入れなければならない
  - 2行以上空白で改行してはいけない
  - with キーワードは利用してはいけない
  */
  "esnext": true,
  "maximumLineLength": null,
  "validateIndentation": 2,
  "disallowTabs": true,
  "disallowTrailingWhitespace": true,
  "requireSemicolons": true,
  "requireLineFeedAtFileEnd": true,
  "disallowMultipleLineBreaks": true,
  "disallowKeywords": [
    "with"
  ],

  /*
  ## ObjectやArrayの最後のカンマはつけてはならない
  ### OK
  ```js
  var a = {
    b: 123,
    c: 456
  }
  ```

  ### NG
  ```js
  var a = {
    b: 123,
    c: 456,
  }
  ```
  */
  "disallowTrailingComma": true,

  /*
  ## カンマの前にはスペースを入れず、後には入れなければならない
  ### OK
  ```js
  function a(b, c) {}
  ```

  ### NG
  ```js
  function a(b , c) {}
  ```
  */
  "validateParameterSeparator": ", ",

  /*
  ## camelCaseかUPPER_CASEでなければならない。但しプロパティ名は除く
  ### OK
  ```js
  var camelCase = 0;
  var CamelCase = 1;
  var _camelCase = 2;
  var camelCase_ = 3;
  var UPPER_CASE = 4;
  var className = style.block__inner;
  ```

  ### NG
  ```js
  var lower_case = 1;
  var Mixed_case = 2;
  var mixed_Case = 3;
  ```
  */
  "requireCamelCaseOrUpperCaseIdentifiers": "ignoreProperties",

  /*
  ## ブロックでは1行でも必ず``{}`を書かなければならない
  ### OK
  ```js
  if (x) {
    return;
  }
  ```

  ### NG
  ```js
  if (x) return;
  ```
  */
  "requireCurlyBraces": [
    "if",
    "else",
    "for",
    "while",
    "do",
    "try",
    "catch"
  ],

  /*
  ## 2行以上の文字列を書いてはならない
  ### OK
  ```js
  x = "multi" +
          "line";
  ```

  ### NG
  ```js
  x = "multi \
          line";
  ```
  */
  "disallowMultipleLineStrings": true,

  /*
  ## カンマで繋いで複数var宣言しない。但し `undefined` なら許可する。
  ### OK
  ```js
  var a, b;
  var x = 1;
  var y = 2;

  for (var i = 0, j = arr.length; i < j; i++) {}
  ```

  ### NG
  ```js
  var x = 1,
      y = 2;
  ```
  */
  "disallowMultipleVarDecl": {
    "allExcept": ["undefined"]
  },

  /*
  ## `else` は `if` の閉じかっこと同じ行に書かなければならない
  ### OK
  ```js
  if (x < 0) {
      x++;
  } else {
      x--;
  }
  ```

  ### NG
  ```js
  if (x < 0) {
      x++;
  }
  else {
      x--;
  }
  ```
  */
  "disallowKeywordsOnNewLine": [
    "else"
  ],

  /*
  ## キーワードの後はスペースを入れなければならない
  ### OK
  ```js
  if (x) {
    x++;
  }
  ```

  ### NG
  ```js
  if(x) {
    x++;
  }
  ```
  */
  "requireSpaceAfterKeywords": [
    "do",
    "for",
    "if",
    "else",
    "switch",
    "case",
    "try",
    "catch",
    "void",
    "while",
    "with",
    "return",
    "typeof"
  ],

  /*
  ## 演算子は改行の前に書かなければならない
  ### OK
  ```js
  a = b +
      c;
  ```

  ### NG
  ```js
  a = b
      + c;
  ```
  */
  "requireOperatorBeforeLineBreak": true,

  /*
  ## 単項演算子の後にスペースを入れてはならない
  ### OK
  ```js
  x = !y; y = ++z;
  ```

  ### NG
  ```js
  x = ! y; y = ++ z;
  ```
  */
  "disallowSpaceAfterPrefixUnaryOperators": true,

  /*
  ## 二項演算子の前後はスペースを入れなければならない
  ### OK
  ```js
  x !== y;
  x + y;
  ```

  ### NG
  ```js
  x!== y;
  x +y;
  ```
  */
  "requireSpaceBeforeBinaryOperators": [
    "=",
    "+=",
    "-=",
    "*=",
    "/=",
    "%=",
    "<<=",
    ">>=",
    ">>>=",
    "&=",
    "|=",
    "^=",
    "+=",
    "+",
    "-",
    "*",
    "/",
    "%",
    "<<",
    ">>",
    ">>>",
    "&",
    "|",
    "^",
    "&&",
    "||",
    "===",
    "==",
    ">=",
    "<=",
    "<",
    ">",
    "!=",
    "!=="
  ],
  "requireSpaceAfterBinaryOperators": true,

  /*
  ## 三項演算子の `?` と `:` 前後はスペースを入れなければならない
  ### OK
  ```js
  var a = b ? c : d;
  ```

  ### NG
  ```js
  var a = b? c : d;
  var e = f ? g: h;
  ```
  */
  "requireSpacesInConditionalExpression": true,

  /*
  ## ブロックの前にスペースを入れなければならない
  ### OK
  ```js
  if (x) { return; }
  ```

  ### NG
  ```js
  if (x){ return; }
  ```
  */
  "requireSpaceBeforeBlockStatements": true,

  /*
  ## for文の `;` の後にスペースを入れなければならない
  ### OK
  ```js
  for(var i = 0; i < l; i++) { x++; }
  ```

  ### NG
  ```js
  for(var i=0;i<l;i++) { x++; }
  ```
  */
  "requireSpacesInForStatement": true,

  /*
  ## 関数宣言のスペースは、()の前は入れず、後には入れなければならない
  ### OK
  ```js
  x = function() {};
  x = function x() {};
  x = (function x() {})();

  function x() {
  }

  x() {
  }
  ```

  ### NG
  ```js
  x = function () {};
  x = function (){};

  function x () {
  }

  x () {
  }
  ```
  */
  "requireSpacesInFunctionExpression": {
    "beforeOpeningCurlyBrace": true
  },
  "requireSpacesInAnonymousFunctionExpression": {
    "beforeOpeningCurlyBrace": true
  },
  "requireSpacesInFunctionDeclaration": {
    "beforeOpeningCurlyBrace": true
  },
  "disallowSpacesInFunctionExpression": {
    "beforeOpeningRoundBrace": true
  },
  "disallowSpacesInAnonymousFunctionExpression": {
    "beforeOpeningRoundBrace": true
  },
  "disallowSpacesInFunctionDeclaration": {
    "beforeOpeningRoundBrace": true
  },

  /*
  ## 関数実行時に関数名と()の間にスペースを入れてはならない
  ### OK
  ```js
  var x = foobar();
  ```

  ### NG
  ```js
  var x = foobar ();
  ```
  */
  "disallowSpacesInCallExpression": true,

  /*
  ## ()の内側にスペースを入れてはならない
  ### OK
  ```js
  var x = (1 + 2) * 3;
  alert({a: 123});
  ```

  ### NG
  ```js
  var x = ( 1 + 2 ) * 3;
  alert( {a: 123} );
  ```
  */
  "disallowSpacesInsideParentheses": true,

  /*
  ## Object / Array 共にカッコの内側にスペースを入れなくてはならない
  ### OK
  ```js
  var { a, b, c } = this.props;
  var d = [ 1, 2, 3 ];
  var e = { a: 123 };
  ```

  ### NG
  ```js
  var {a, b, c} = this.props;
  var d = [1, 2, 3];
  var e = {a: 123};
  ```
  */
  "requireSpacesInsideObjectBrackets": "all",
  "requireSpacesInsideArrayBrackets": "all",

  /*
  ## Objectのスペースは `:`の前は入れず、後には入れなければならない
  ### OK
  ```js
  var a = {b: 123};
  ```

  ### NG
  ```js
  var a = {b : 123};
  ```
  */
  "disallowSpaceAfterObjectKeys": true,
  "requireSpaceBeforeObjectValues": true,

  /*
  ## newされるコンストラクタ名の先頭は大文字にしなければならない
  ### OK
  ```js
  var a = new B();
  ```

  ### NG
  ```js
  var a = new b();
  ```
  */
  "requireCapitalizedConstructors": true,

  /*
  ## シングルクォーテーションを使用しなければならない
  ### OK
  ```js
  var a = 'abc';
  ```

  ### NG
  ```js
  var a = "abc";
  ```
  */
  "validateQuoteMarks": { "mark": "'", "escape": true }

}
